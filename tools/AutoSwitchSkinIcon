python3 -c import yaml
python3 -c import tqdm
import yaml
import sys
import os
import shutil
from tqdm import tqdm

# 全局集合，记录发生改动的文件（保存绝对路径，无论后缀）
modified_files = set()
# 记录未找到的交换对
not_found_pairs = []

def decimal_to_little_endian_hex(decimal_number, byte_length=4):
    """
    将数字转换为小端格式的16进制字符串
    """
    little_endian_bytes = decimal_number.to_bytes(byte_length, byteorder='little', signed=True)
    return little_endian_bytes.hex()

def search_hex_positions(file_path, target_hex):
    """
    在文件中搜索目标16进制字节串的位置，返回所有匹配的偏移量
    """
    byte_pattern = bytes.fromhex(target_hex)
    positions = []
    with open(file_path, 'rb') as f:
        data = f.read()
        offset = 0
        while True:
            pos = data.find(byte_pattern, offset)
            if pos == -1:
                break
            positions.append(pos)
            offset = pos + 1
    return positions

def extract_mapping(file_path, start_marker, end_marker, target_position):
    """
    根据目标代码出现位置，在文件中查找离该位置最近的两个特征标记，
    并提取这两个标记之间的16进制数据作为映射。
    """
    required_length=28
    positions_start = search_hex_positions(file_path, start_marker)
    positions_end = search_hex_positions(file_path, end_marker)
    if not positions_start or not positions_end:
        return None
    # 选择距离目标位置最近的 start_marker 与 end_marker
    closest_start = min(positions_start, key=lambda pos: abs(pos - target_position))
    closest_end = min(positions_end, key=lambda pos: abs(pos - target_position))
    if closest_start > closest_end:
        closest_start, closest_end = closest_end, closest_start
    marker_length = len(start_marker) // 2  # 如 "aa78" 为2字节
    with open(file_path, 'rb') as f:
        f.seek(closest_start + marker_length)
        middle_length = closest_end - (closest_start + marker_length)
        middle_data = f.read(middle_length)
    mapping = middle_data.hex()
       # 如果mapping长度不是预期的，返回None
    if len(mapping) != required_length:
        return None
    return mapping

def write_mapping(file_path, start_marker, end_marker, target_position, new_mapping):
    """
    根据目标代码出现位置，找到离它最近的两个特征标记，
    并将它们之间的内容替换为 new_mapping
    """
    positions_start = search_hex_positions(file_path, start_marker)
    positions_end = search_hex_positions(file_path, end_marker)
    if not positions_start or not positions_end:
        return False
    closest_start = min(positions_start, key=lambda pos: abs(pos - target_position))
    closest_end = min(positions_end, key=lambda pos: abs(pos - target_position))
    if closest_start > closest_end:
        closest_start, closest_end = closest_end, closest_start
    marker_length = len(start_marker) // 2
    with open(file_path, 'rb') as f:
        data = bytearray(f.read())
    original_length = closest_end - (closest_start + marker_length)
    new_bytes = bytes.fromhex(new_mapping)
    if len(new_bytes) != original_length:
        raise ValueError("新的映射长度与原映射长度不匹配。")
    data[closest_start + marker_length: closest_end] = new_bytes
    with open(file_path, 'wb') as f:
        f.write(data)
    return True

def load_config(config_file):
    with open(config_file, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def prepare_destination():
    """
    清空当前目录下 "打包/uexp" 文件夹，
    并将同级目录 "解包数据/uexp" 中的所有文件（不论后缀），
    包括子文件夹中的文件，复制到 "打包/uexp"。
    """
    dest_dir = os.path.join(os.getcwd(), "打包", "uexp")
    source_dir = os.path.join(os.getcwd(), "解包数据", "uexp")
    
    # 清空目标文件夹，删除所有内容
    if os.path.exists(dest_dir):
        for root, dirs, files in os.walk(dest_dir, topdown=False):
            for name in files:
                os.remove(os.path.join(root, name))
            for name in dirs:
                os.rmdir(os.path.join(root, name))
    else:
        os.makedirs(dest_dir)
    
    # 复制源目录的文件到目标目录，保留文件而不是文件夹结构
    if os.path.exists(source_dir):
        for root, dirs, files in os.walk(source_dir):
            for file in files:
                s = os.path.join(root, file)
                d = os.path.join(dest_dir, file)
                shutil.copy2(s, d)  # 复制文件到目标目录
                print(f"已将文件 {s} 复制到 {d}")
    else:
        print(f"源目录 {source_dir} 不存在。")


def scan_all_files(root_path, targets, hex_markers):
    """
    扫描指定目录及其子目录中的所有文件（不限后缀），
    对每个文件尝试提取目标代码的映射信息，
    返回字典格式：
      { code: { 'file': 文件路径, 'target_position': 位置, 'mapping': 映射 } }
    """
    mapping_info = {}
    codes_set = set()
    for group in targets:
        if len(group) == 2:
            codes_set.update(group)
    all_files = []
    for dirpath, _, files in os.walk(root_path):
        for file in files:
            all_files.append(os.path.join(dirpath, file))
    for file_path in tqdm(all_files, desc="处理文件", unit="文件"):
        for code in codes_set:
            if code in mapping_info:
                continue
            code_hex = decimal_to_little_endian_hex(code, 4)
            positions = search_hex_positions(file_path, code_hex)
            if not positions:
                continue
            target_pos = positions[0]
            mapping = extract_mapping(file_path, hex_markers.get('start', 'aa78'),
                                      hex_markers.get('end', '9e78'), target_pos)
            if mapping is not None:
                mapping_info[code] = {
                    'file': os.path.abspath(file_path),
                    'target_position': target_pos,
                    'mapping': mapping
                }
                print(f"文件 {file_path}: 成功找到代码 {code} 的映射 -> {mapping}")
    return mapping_info

def process_cross_file_swap(root_path, targets, hex_markers):
    """
    扫描所有文件（不限后缀），针对配置中每组目标代码（要求2个数字），
    即使映射分布在不同文件中，也交换它们的映射数据，并写回原文件。
    """
    mapping_info = scan_all_files(root_path, targets, hex_markers)
    for group in targets:
        if len(group) != 2:
            continue
        code1, code2 = group
        if code1 not in mapping_info or code2 not in mapping_info:
            continue
        mapping1 = mapping_info[code1]['mapping']
        mapping2 = mapping_info[code2]['mapping']
        file1 = mapping_info[code1]['file']
        file2 = mapping_info[code2]['file']
        pos1 = mapping_info[code1]['target_position']
        pos2 = mapping_info[code2]['target_position']
        try:
            if write_mapping(file1, hex_markers.get('start', 'aa78'),
                              hex_markers.get('end', '9e78'), pos1, mapping2):
                print(f"成功交换代码 {code1} 与 {code2} 的映射: {mapping1} <-> {mapping2} (文件 {file1})")
                modified_files.add(os.path.abspath(file1))  # 记录修改过的文件
            if write_mapping(file2, hex_markers.get('start', 'aa78'),
                              hex_markers.get('end', '9e78'), pos2, mapping1):
                print(f"成功交换代码 {code2} 与 {code1} 的映射: {mapping2} <-> {mapping1} (文件 {file2})")
                modified_files.add(os.path.abspath(file2))  # 记录修改过的文件
        except ValueError:
            continue


def move_and_cleanup(source_dir, modified_files):
    """
    清理未修改的文件并删除它们，仅在打包/uexp目录下操作，保留修改过的文件。
    """
    print(f"开始清理源文件夹 {source_dir} 中的未修改文件...")
    for root, dirs, files in os.walk(source_dir, topdown=False):
        for name in files:
            file_path = os.path.join(root, name)
            abs_path = os.path.abspath(file_path)
            if abs_path not in modified_files:
                os.remove(file_path)  # 删除未修改的文件
                print(f"已删除文件 {file_path}")
        for name in dirs:
            dir_path = os.path.join(root, name)
            if not os.listdir(dir_path):  
                os.rmdir(dir_path)
                print(f"已删除空目录 {dir_path}")

def main():
    config_file = '伪实体配置.yaml'
    config = load_config(config_file)
    targets = config.get('search_targets', [])
    hex_markers = config.get('hex_markers', {'start': 'aa78', 'end': '9e78'})
    folder_path = config.get('folder_path', None)
    if folder_path:
        prepare_destination()
        process_cross_file_swap(folder_path, targets, hex_markers)
        move_and_cleanup(folder_path, modified_files)  # 清理文件夹内未修改的文件
        print(f"未找到的交换对数量: {len(not_found_pairs)}")
        if not_found_pairs:
            print("未找到的交换对:")
            for pair in not_found_pairs:
                print(pair)
    else:
        print("未指定文件夹路径。")

if __name__ == "__main__":
    main()
